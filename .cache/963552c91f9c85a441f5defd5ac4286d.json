{"dependencies":[{"name":"./env"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _env = require(\"./env\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TAP_DELAY_TIME = 200;\nvar DB_TAP_DELAY_TIME = 190;\nvar LONG_TAP_DELAY_TIME = 500;\n\n/**\n * Toucher 类\n * @constructor\n * @param {DOM} target - 绑定的DOM对象\n */\n\nvar Toucher = function () {\n  function Toucher(target) {\n    var _this = this;\n\n    _classCallCheck(this, Toucher);\n\n    // init data\n    Object.assign(this, {\n      target: target,\n      events: {},\n      touchStartTime: 0,\n      lastTouchTime: 0,\n      x1: 0, y1: 0, x2: 0, y2: 0, moveX: 0, moveY: 0,\n      isLongTap: false, // 用来在 touchend 时判断是否为长按\n      longTapTimer: null,\n      singleTapTimer: null,\n      _isActive: true // 当false 时，停止一切监听\n    });\n\n    // 注册默认的事件函数\n    var _usedMehod = ['tap', 'longTap', 'dbTap', 'swipeStart', 'swipe', 'swipeEnd'];\n\n    var _loop = function _loop(m) {\n      _this[m] = function (fn, option) {\n        _this.register(m, fn, option);\n        return _this;\n      };\n    };\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _usedMehod[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var m = _step.value;\n\n        _loop(m);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  /**\n   * 初始化事件绑定\n   */\n\n\n  _createClass(Toucher, [{\n    key: \"init\",\n    value: function init() {\n      this.target.addEventListener('touchstart', this._proxy('touchStart'), false);\n      this.target.addEventListener('touchend', this._proxy('touchEnd'), false);\n      this.target.addEventListener('touchmove', this._proxy('touchMove'), false);\n      // DOM.addEventListener('touchcancel',actionOver);\n    }\n\n    /**\n     * 停止一切监听\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._stopWatchLongTap();\n      this._isActive = false;\n    }\n\n    /**\n     * 调用所有向事件类型注册的回调\n     * \n     * @param {String} type - 事件类型\n     * @param {Event} e - 事件对象\n     */\n\n  }, {\n    key: \"_emit\",\n    value: function _emit(type, e) {\n      var fns = this.events[type];\n      if (fns) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = fns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var fn = _step2.value;\n\n            fn.call(this, e, this);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * 订阅模式，注册回调函数\n     * \n     * @param {DOM} target - 绑定的DOM 对象\n     * @param {String} type - 事件类型 (tap, longTap...)\n     * @param {Function} fn - 回调注册\n     * @param {Object} Option - 配置对象\n     */\n\n  }, {\n    key: \"_addEvent\",\n    value: function _addEvent(target, type, fn) {\n      var option = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      if (!target || !target.nodeType) {\n        return false;\n      }\n\n      if (typeof this.events[type] === 'undefined') {\n        this.events[type] = [];\n      }\n\n      this.events[type].push(fn);\n    }\n\n    /**\n     * 简单的代理函数\n     * 这里绑定了 this 作用域\n     * \n     * @param {String} type - 事件类型\n     */\n\n  }, {\n    key: \"_proxy\",\n    value: function _proxy(type) {\n      var that = this;\n      return function (e) {\n        // 防止冒泡\n        if (e.stopPropagation) {\n          e.stopPropagation();\n        }\n\n        e.preventDefault();\n\n        that[type](e);\n      };\n    }\n    /**\n     * 停止监听长按事件\n     */\n\n  }, {\n    key: \"_stopWatchLongTap\",\n    value: function _stopWatchLongTap() {\n      clearTimeout(this.longTapTimer);\n    }\n\n    /**\n     * start touch\n     * \n     * @param {Event} e \n     */\n\n  }, {\n    key: \"touchStart\",\n    value: function touchStart(e) {\n      var _this2 = this;\n\n      this.isLongTap = false;\n      this._isActive = true;\n\n      // 这里记录最新的触摸信息\n      Object.assign(this, {\n        x1: e.touches[0].pageX,\n        y1: e.touches[0].pageY,\n        x2: 0,\n        y2: 0,\n        moveX: 0,\n        moveY: 0,\n        touchStartTime: new Date()\n      });\n\n      this._emit('swipeStart', e.touches[0]);\n\n      // 把上一次的定时器清除\n      this._stopWatchLongTap();\n      // 延时判断是否为长按事件\n      this.longTapTimer = setTimeout(function () {\n        // 如果超过 LONG_TAP_DELAY_TIME，判定为长按事件  \n        _this2.isLongTap = true;\n        _this2._emit('longTap', e);\n      }, LONG_TAP_DELAY_TIME);\n    }\n\n    /**\n     * touch moving\n     * \n     * @param {Event} e - 事件对象\n     */\n\n  }, {\n    key: \"touchMove\",\n    value: function touchMove(e) {\n      this.stop();\n\n      // 当前坐标\n      var curX = e.touches[0].pageX;\n      var curY = e.touches[0].pageY;\n\n      // 更新最后坐标\n      Object.assign(this, {\n        x2: curX,\n        y2: curY,\n        moveX: curX - this.x1, // 计算移动 x 距离\n        moveY: curY - this.y1, // 计算移动 y 距离\n        touchStartTime: new Date()\n      });\n\n      this._emit('swipe', e.touches[0]);\n    }\n\n    /**\n     * touch ended\n     * \n     * @param {Event} e \n     */\n\n  }, {\n    key: \"touchEnd\",\n    value: function touchEnd(e) {\n      var _this3 = this;\n\n      // 如果已经是长按事件，其他事件不触法\n      if (this.isLongTap) {\n        return;\n      }\n\n      this._emit('swipeEnd', e.touches[0]);\n\n      // 到这都没有触发 longTapTimer， \n      // 说明不是长按事件\n      this._stopWatchLongTap();\n\n      if (!this._isActive) {\n        return false;\n      }\n\n      var now = new Date();\n      if (!this.events['dbTap'] || this.events['dbTap'].length == 0) {\n        // 如果未绑定双击，直接判定为单击      \n        this._emit('tap', e);\n      } else if (now - this.lastTouchTime > TAP_DELAY_TIME) {\n        this.singleTapTimer = setTimeout(function () {\n          _this3._emit('tap', e);\n        }, DB_TAP_DELAY_TIME);\n      } else {\n        clearTimeout(this.singleTapTimer);\n        this._emit('dbTap', e);\n      }\n      this.lastTouchTime = now;\n    }\n\n    /**\n     * 注册事件函数\n     * 外部可访问接口\n     * \n     * @param {String} type - 事件类型\n     * @param {Function} fn - 回调\n     * @param {Object} option - 配置\n     */\n\n  }, {\n    key: \"register\",\n    value: function register(type, fn, option) {\n      this._addEvent(this.target, type, fn, option);\n    }\n  }]);\n\n  return Toucher;\n}();\n\nvar factory = function factory(target, option) {\n  if (!_env.supportTouch) {\n    console.log('当前环境不支持触摸手势');\n    return null;\n  }\n\n  var t = new Toucher(target, option);\n  t.init();\n  return t;\n};\n\nif (window && !window.leenToucher) {\n  window.leenToucher = factory;\n}\n\nexports.default = factory;"},"hash":"c54ea4e7e9d7bea9617ebbafbdd68a5b"}